//
//  ViewController.swift
//  places
//
//  Created by WSR on 6/23/19.
//  Copyright ¬© 2019 WSR. All rights reserved.
//

import UIKit
import MapKit
import CoreLocation
import Alamofire
import SwiftyJSON

/*

–°—Ä–∞–∑—É –æ—Ç–º–µ—á—É, —á—Ç–æ –¥–µ–ª–∞–ª –Ω–µ –ø–æ —Ç–µ–∫—Å—Ç—É –ª–µ–∫—Ü–∏–∏, –∞ –ø–æ —ç—Ç–æ–º—É —Ç—É—Ç–æ—Ä–∏–∞–ª—É: 
https://www.raywenderlich.com/548-mapkit-tutorial-getting-started

*/

// –æ–ø–∏—Å—ã–≤–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
struct place {
    var title: String
    var desc: String
    var coord: CLLocationCoordinate2D
    var imgName: String
}

// –∫–ª–∞—Å—Å, –ø–æ—Ç–æ–º–æ–∫ MKAnnotation, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–ª—å–Ω–æ—Ç—è–Ω—É—Ç –∏–∑ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞, —Ç–æ–ª—å–∫–æ —É–±—Ä–∞–ª –æ–¥–Ω–æ –ø–æ–ª–µ
class Artwork: NSObject, MKAnnotation {
    let title: String?
    let locationName: String
    let coordinate: CLLocationCoordinate2D
    let imgName: String
    
    // –∫–æ–Ω—Å—Ç—Ä—É—Ç–æ—Ä (–æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω—ã –∫–ª–∞—Å—Å—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
    init(title: String, locationName: String, coordinate: CLLocationCoordinate2D, imgName: String) {
        self.title = title
        self.locationName = locationName
        self.coordinate = coordinate
        self.imgName = imgName
        
        super.init()
    }
    
    var subtitle: String? {
        return locationName
    }
}

class ViewController: UIViewController, MKMapViewDelegate, CLLocationManagerDelegate {
    let locationManager = CLLocationManager()
    
    @IBOutlet weak var mapView: MKMapView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–≤–æ–π –∫–ª–∞—Å—Å, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã 
        // (–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—à –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç MKMapViewDelegate)
        mapView.delegate = self

        // —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç–µ
        mapView.showsUserLocation = true
        
        if CLLocationManager.authorizationStatus() == .authorizedAlways {
            // –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–≤–æ–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–±—ã—Ç–∏–π –ª–æ–∫–∞—Ç–æ—Ä–∞ (CLLocationManagerDelegate)
            locationManager.delegate = self
            let location = mapView.userLocation
            location.title = "–Ø –∑–¥–µ—Å—å"
            
            // –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
            loadArts()
        } else {
            locationManager.requestAlwaysAuthorization()
        }
    }

    // –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ CLLocationManager –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    override func viewWillAppear(_ animated: Bool) {
        if CLLocationManager.locationServicesEnabled() {
            locationManager.delegate = self
            locationManager.desiredAccuracy = kCLLocationAccuracyBest
            locationManager.startUpdatingLocation()
        }
     }

    // —Ä–µ–≥–∏–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–µ–º –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        self.locationManager.stopUpdatingLocation()
        let radius = CLLocationDistance(10000)
        let region = MKCoordinateRegion(center: CLLocationCoordinate2D(latitude: locations[0].coordinate.latitude, longitude: locations[0].coordinate.longitude), latitudinalMeters: radius, longitudinalMeters: radius)
        self.mapView.setRegion(region, animated: false)
    }

    //–≥—Ä—É–∑–∏–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    func loadArts(){
        let url = "http://cars.areas.su/arts"
        // –ø–æ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        Alamofire.request(url).validate().responseJSON { response in
            switch response.result {
            case .success(let value):
                //–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                let json = JSON(value)
                
                for item in json.arrayValue {
                    let aw = Artwork(title: item["title"].stringValue,
                                     locationName: item["subTitle"].stringValue,
                                     coordinate: CLLocationCoordinate2D(latitude: item["lat"].doubleValue, longitude: item["long"].doubleValue),
                                     imgName: item["image"].stringValue)
                    
                    self.mapView.addAnnotation( aw )
                }
                
            case .failure(let error):
                print(error)
            }
        }
    }
    
    // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º–æ–π —Ç–æ—á–∫–∏
    internal func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        
        // –ø—Ä–æ–≤–µ—Ä—è—é, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ Artwork (—Ç.–µ. –º–µ—Ç–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π –≤—ã–ª–µ—Ç–∏—Ç –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        guard let annotation = annotation as? Artwork else { return nil }
        
        let identifier = "marker"
        var view: MKMarkerAnnotationView
        
        if let dequeuedView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)
                as? MKMarkerAnnotationView {
            // —Å—é–¥–∞ –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç
            dequeuedView.annotation = annotation
            view = dequeuedView
        } else {
            // –°–æ–∑–¥–∞—é –º–µ—Ç–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            // —è –∏—Å–ø–æ–ª—å–∑—É—é –∫–ª–∞—Å—Å MKMarkerAnnotationView, —Ç.–∫. –æ–Ω –ø–æ –∫–ª–∏–∫—É –Ω–∞ –º–µ—Ç–∫–µ –º–æ–∂–µ—Ç —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
            // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            view = MKMarkerAnnotationView(annotation: annotation, reuseIdentifier: identifier)

            // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é —Å–∏–º–≤–æ–ª –∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≥–µ–æ–º–µ—Ç–∫–∏ (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –∏ —Ñ–æ—Ä–º—É –≥–µ–æ–º–µ—Ç–∫–∏ - –≤ —Ç—É—Ç–æ—Ä–∏–∞–ª–µ —ç—Ç–æ –µ—Å—Ç—å)
            view.glyphText = "üöó"
            view.markerTintColor = .blue

            // —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            view.canShowCallout = true
            view.isDraggable = true
            view.calloutOffset = CGPoint(x: -5, y: 5)

            // –∫–ª–∞—Å—Å MKMarkerAnnotationView –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3-—Ö –±–ª–æ–∫–æ–≤: 
            // leftCalloutAccessoryView, detailCalloutAccessoryView, rightCalloutAccessoryView 

            // –≤ –ø—Ä–∞–≤–æ–º –±–ª–æ–∫–µ —è –≤—ã–≤–æ–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 
            // (—Ç—É—Ç –æ–ø—è—Ç—å –∂–µ –Ω—É–∂–Ω–æ –±—ã –≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–∫–∞ –±–µ—Ä–µ—Ç—Å—è –æ–¥–Ω–æ, –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –≤ –ø—Ä–æ–µ–∫—Ç)
            let mapsButton = UIButton(  frame: CGRect(origin: CGPoint.zero,
                                        size: CGSize(width: 200, height: 200)))
            
            // –≤ –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã - –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º
            let urlStr = annotation.imgName.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)
            
            if let url = URL(string: urlStr!) {
                if let data = try? Data(contentsOf: url){
                    mapsButton.setBackgroundImage( UIImage(data: data), for: UIControl.State())
                }
            }
            
            // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–∞—à–µ–π –∫–Ω–æ–ø–∫–∏ - –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
            //mapsButton.addTarget(self, action: #selector(buttonClicked(_:)), for: .touchUpInside)

            
            view.rightCalloutAccessoryView = mapsButton

            // –ø–æ –∏–¥–µ–µ –∫–ª–∞—Å—Å MKMarkerAnnotationView –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç title –∏ subtite –∏–∑ –Ω–∞—à–µ–π –º–µ—Ç–∫–∏
            // –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –æ–±—Ä–µ–∑–∞–µ—Ç –æ–∫–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            // –∏ –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, —Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤—ã—à–µ, –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è

            // —á—Ç–æ–±—ã —ç—Ç–æ–≥–æ –∏–∑–±–µ–∂–∞—Ç—å, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π Label
            let detailLabel = UILabel()
            detailLabel.numberOfLines = 0
            detailLabel.font = detailLabel.font.withSize(12)
            detailLabel.text = annotation.subtitle

            // –∏ –≤ –Ω–µ–º –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ –≤—ã—Å–æ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            detailLabel.heightAnchor.constraint(equalToConstant: 200).isActive = true
            
            // —Å–æ–∑–¥–∞–Ω–Ω—ã–π Label –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –Ω–∞—à–µ–π –º–µ—Ç–∫–∏ 
            view.detailCalloutAccessoryView = detailLabel
        }
        return view
        
    }
    
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –ø–æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Å—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
    func mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView,
                 calloutAccessoryControlTapped control: UIControl) {
        let location = view.annotation as! Artwork
        
        
        //–æ—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏
        self.mapView.removeOverlays(self.mapView.overlays)
        
        let srcCoord = mapView.userLocation.coordinate,
            targetCoord = location.coordinate
        
        let src = MKPlacemark(coordinate: srcCoord),
            target = MKPlacemark(coordinate: targetCoord)
        
        let req = MKDirections.Request()
        
        req.source = MKMapItem(placemark: src)
        req.destination = MKMapItem(placemark: target)
        req.transportType = .walking
        
        let direction = MKDirections(request: req)
        
        direction.calculate{
            (response, error) in
            guard let directionResonse = response else {
                if let error = error {
                    print("we have error getting directions==\(error.localizedDescription)")
                }
                return
            }
            
            let route = directionResonse.routes[0]
            self.mapView.addOverlay(route.polyline, level: .aboveRoads)
            
            let rect = route.polyline.boundingMapRect
            self.mapView.setRegion(MKCoordinateRegion(rect), animated: true)
        }
    }
    
//    // —Å–æ–±—ã—Ç–∏–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏ –≥–µ–æ–º–µ—Ç–∫–∏ - —É–±—Ä–∞–ª
//    @objc func buttonClicked(_ sender: UIButton) {
//
//    }
    
    // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–≤–µ—Ä–ª–µ—è
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        let render = MKPolylineRenderer(overlay: overlay)
        render.strokeColor = UIColor.blue
        render.lineWidth = 4.0
        return render
        
    }
    
    // —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –≥–µ–æ–º–µ—Ç–∫–µ
    // –Ω–æ —Ç–∞–∫ –∫–∞–∫ –ø–æ –∫–ª–∏–∫—É —É –Ω–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
//    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
//        print(view.annotation?.title!! ?? "unknown")
//    }
}


